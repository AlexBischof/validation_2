package de.bischinger.validation.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link MySubPojo} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MySubPojoAssert extends AbstractAssert<MySubPojoAssert, MySubPojo> {

  /**
   * Creates a new <code>{@link MySubPojoAssert}</code> to make assertions on actual MySubPojo.
   * @param actual the MySubPojo we want to make assertions on.
   */
  public MySubPojoAssert(MySubPojo actual) {
    super(actual, MySubPojoAssert.class);
  }

  /**
   * An entry point for MySubPojoAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMySubPojo)</code> and get specific assertion with code completion.
   * @param actual the MySubPojo we want to make assertions on.
   * @return a new <code>{@link MySubPojoAssert}</code>
   */
  public static MySubPojoAssert assertThat(MySubPojo actual) {
    return new MySubPojoAssert(actual);
  }

  /**
   * Verifies that the actual MySubPojo's text is equal to the given one.
   * @param text the given text to compare the actual MySubPojo's text to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MySubPojo's text is not equal to the given one.
   */
  public MySubPojoAssert hasText(String text) {
    // check that actual MySubPojo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualText = actual.getText();
    if (!Objects.areEqual(actualText, text)) {
      failWithMessage(assertjErrorMessage, actual, text, actualText);
    }

    // return the current assertion for method chaining
    return this;
  }

}
